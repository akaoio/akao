id: "akao:artifact:architectural-reformation:phase-2:step-1:identification_schema:v1"
metadata:
  specification: "System-wide mandatory identification schema with complete metadata standards for all Akao components"
  scope: "All system components including directories, files, functions, classes with akao namespace compliance"
  timeline: "2025-07-08"
  rationale: "Establish traceability, cross-referencing, and systematic governance through comprehensive identification"
  methodology: "Mandatory identification standard implementation with metadata schema deployment and validation enforcement"
  references: 
    - "/workspaces/akao/sandbox/prompts/templates/common-standards.md"
    - "akao:artifact:architectural-reformation:plan:v1"
    - "CONTRIBUTING.md"

# Core identification pattern
identification_pattern:
  format: "akao:[type]:[category]:[subcategory]:[name]:[version]"
  components:
    type:
      description: "Component classification type"
      values:
        - "philosophy"      # Abstract principles and concepts
        - "rule"           # Concrete executable logic
        - "ruleset"        # Collections of related rules
        - "artifact"       # Development artifacts and plans
        - "file"           # Source code files and documentation
        - "trace"          # Runtime execution traces
        - "test"           # Test cases and validation
        - "function"       # Individual functions and methods
        - "class"          # Classes, structs, and data types
        - "directory"      # Folders and directory structures
        - "interface"      # API interfaces and contracts
        - "engine"         # Core engine components
        - "framework"      # Architectural frameworks
        - "system"         # System-level components
    category:
      description: "Primary domain classification"
      validation: "Must align with architectural governance taxonomy"
      examples:
        - "core"           # Core engine components
        - "automation"     # Automated processes
        - "structure"      # Structural elements
        - "validation"     # Validation components
        - "measurement"    # Metrics and monitoring
        - "interface"      # External interfaces
        - "evolution"      # Change management
    subcategory:
      description: "Secondary domain classification"
      validation: "Must be hierarchically consistent with category"
      examples:
        - "engine"         # Engine subsystems
        - "filesystem"     # File system operations
        - "semantic"       # Semantic processing
        - "validator"      # Validation subsystems
    name:
      description: "Specific component identifier"
      constraints:
        - "kebab-case format required"
        - "Maximum 30 characters"
        - "No underscores allowed"
        - "Descriptive and unique within scope"
    version:
      description: "Component version identifier"
      format: "v[number]"
      constraints:
        - "Sequential versioning required"
        - "Starting from v1"
        - "No revision letters (use new version)"

# Mandatory metadata schema
metadata_schema:
  mandatory_fields:
    specification:
      description: "Technical specification of component purpose and functionality"
      constraints:
        - "10-100 words"
        - "Technical and precise"
        - "Avoid marketing language"
    scope:
      description: "Architectural location and boundaries"
      constraints:
        - "Must specify system context"
        - "Include dependency boundaries"
        - "Reference architectural layers"
    timeline:
      description: "Creation or last modification date"
      format: "YYYY-MM-DD"
      validation: "Must be valid ISO date"
    rationale:
      description: "Justification for component existence"
      constraints:
        - "Must demonstrate value proposition"
        - "Reference architectural necessity"
        - "Avoid circular reasoning"
    methodology:
      description: "Implementation approach and technical method"
      constraints:
        - "Must describe how component works"
        - "Include algorithmic approach if applicable"
        - "Reference design patterns used"
    references:
      description: "Cross-references to related components"
      format: "Array of akao namespace IDs or URLs"
      validation: "All references must be resolvable"
  
  code_specific_fields:
    doc:
      description: "User-facing documentation"
      constraints:
        - "20-200 words for code components"
        - "Clear and accessible language"
        - "Usage examples where appropriate"
        - "MANDATORY for all code files"
  
  directory_specific_fields:
    directory_metadata:
      file: "_.yaml"
      location: "Required in every directory"
      content: "Full metadata schema with directory-specific scope"

# Component-specific requirements
component_requirements:
  directories:
    identification_file: "_.yaml"
    metadata_requirement: "Full metadata schema required"
    naming_conventions:
      - "kebab-case only"
      - "Singular for functional directories"
      - "Plural for collections"
      - "No versions in directory names"
      - "Maximum 30 characters"
      
  files:
    identification_method: "Header comment block"
    naming_conventions:
      - "Version-based naming: v1.cpp, v2.hpp"
      - "kebab-case for multi-word names"
      - "No underscores allowed"
      - "Maximum 2 words before version"
    metadata_location: "File header comment"
    
  functions:
    identification_method: "Function header comment"
    metadata_requirement: "Full schema including @doc field"
    naming_conventions:
      - "camelCase for function names"
      - "Descriptive and clear purpose"
      - "No abbreviations unless standard"
      
  classes:
    identification_method: "Class header comment"
    metadata_requirement: "Full schema with architectural context"
    naming_conventions:
      - "PascalCase for class names"
      - "Noun-based naming"
      - "Clear responsibility indication"

# Validation requirements
validation_framework:
  compliance_levels:
    blocking_errors:
      - "Missing mandatory metadata fields"
      - "Invalid akao namespace format"
      - "Missing @doc field for code components"
      - "Unresolvable references"
      - "Naming convention violations"
      - "Grammar rule violations"
    
    quality_warnings:
      - "Insufficient specification detail"
      - "Weak rationale justification"
      - "Missing cross-references"
      - "Outdated timeline information"
    
    best_practices:
      - "Archaeological preservation completeness"
      - "Philosophy-rule separation adherence"
      - "Universal parser compatibility"
      - "Deterministic validation compliance"

  enforcement_mechanisms:
    automated_checking:
      - "Namespace format validation"
      - "Metadata completeness verification"
      - "Reference resolution checking"
      - "Naming convention enforcement"
    
    manual_review:
      - "Specification quality assessment"
      - "Rationale justification review"
      - "Architectural alignment verification"
      - "Cross-reference accuracy validation"

# Implementation deployment strategy
deployment_strategy:
  phase_1_mandatory:
    scope: "All new components must comply immediately"
    enforcement: "Blocking validation for new code"
    timeline: "Immediate implementation"
    
  phase_2_existing:
    scope: "Gradual compliance for existing components"
    method: "Archaeological preservation during modification"
    timeline: "Component-by-component during maintenance"
    
  phase_3_comprehensive:
    scope: "System-wide compliance verification"
    method: "Automated scanning and compliance reporting"
    timeline: "Post-deployment validation sweep"

# Cross-reference resolution system
cross_reference_system:
  resolution_methods:
    internal_references:
      pattern: "akao:[type]:[category]:[subcategory]:[name]:[version]"
      resolution: "Internal component lookup system"
      validation: "Must resolve to existing component"
      
    external_references:
      pattern: "URL or file path"
      resolution: "External resource verification"
      validation: "Must be accessible and relevant"
      
    documentation_references:
      pattern: "Relative path or akao namespace"
      resolution: "Documentation system lookup"
      validation: "Must exist and be current"

  dependency_tracking:
    forward_references: "Components this component depends on"
    backward_references: "Components that depend on this component"
    circular_dependency_detection: "Automated cycle detection and prevention"
    impact_analysis: "Change propagation assessment"

# Quality metrics and assessment
quality_metrics:
  identification_coverage:
    target: "100% system component identification"
    measurement: "Automated scanning and compliance counting"
    reporting: "Regular compliance status reports"
    
  metadata_completeness:
    target: "100% mandatory field population"
    measurement: "Field-by-field compliance verification"
    reporting: "Missing field identification and tracking"
    
  reference_integrity:
    target: "100% reference resolution success"
    measurement: "Automated reference checking"
    reporting: "Broken reference identification and repair"
    
  cross_reference_density:
    target: "Minimum 3 references per component"
    measurement: "Reference counting and relationship mapping"
    reporting: "Component isolation identification"

# Archaeological preservation integration
archaeological_integration:
  component_lifecycle:
    creation: "Full identification and metadata capture"
    modification: "Version increment with change documentation"
    deprecation: "Archival with replacement reference"
    elimination: "Archaeological preservation with elimination rationale"
    
  historical_tracking:
    version_history: "Complete component evolution documentation"
    dependency_evolution: "Reference relationship change tracking"
    architectural_migration: "Component movement and reorganization history"
    
  future_accessibility:
    metadata_preservation: "Permanent metadata retention"
    context_documentation: "Architectural context preservation"
    decision_rationale: "Design decision archaeological record"
    implementation_methodology: "Technical approach documentation"

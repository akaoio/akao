---
# Akao Philosophy: Documentation is code
# All documentation must be generated from actual rules and tests

metadata:
  id: akao:philosophy::documentation:generation:v1
  name: Documentation is code
  version: 1.0.0
  category: documentation
  created_at: '2025-07-05T17:02:04.663124Z'
  updated_at: '2025-07-05T17:02:04.663140Z'
  author: akao-framework
description: All documentation must be generated from actual rules and tests
formal_logic:
  domain: documentation
  predicate: generation_documentation
  axioms:
  - id: axiom_generation_01
    statement: '∀x: documentation_element(x) → must_comply_generation(x)'
    datalog: generation_compliant(X) :- documentation_element(X), satisfies_generation_conditions(X).
  invariants:
  - id: invariant_generation_01
    statement: '∀x: generation_compliant(x) → ¬generation_violation(x)'
    datalog: no_generation_violation(X) :- generation_compliant(X).
  logic_engine: datalog
validation:
  conditions:
  - name: check_generation_compliance
    description: Validates Documentation is code compliance
    logic: elements.every(e => e.complies_with_generation_rules())
    datalog_query: generation_compliant(X) :- documentation_element(X), satisfies_generation_rules(X).
    prolog_check: validate_generation :- forall(documentation_element(X), generation_compliant(X)).
implementation:
  enforcement_points:
  - Core enforcement point for Documentation is code
  technical_requirements:
  - Core technical requirement for Documentation is code
  user_interface:
  - akao validate --generation
measurement:
  metrics:
  - name: generation_compliance_rate
    description: Percentage of elements following Documentation is code rules
    formula: compliant_elements / total_elements * 100
dependencies:
  requires: []
  recommends: []
audit:
  compliance_checks:
  - Core compliance check for Documentation is code
  violation_severity: MEDIUM
  auto_fix_available: false
